using UnityEngine;
using UnityEngine.UI;
using ItemData;
using InventoryManagement;

/*
 * [작업 사항]
 * 
 * <v1.0 - 2023_1102_최원준>
 * 1- 최초작성 및 주석처리
 * 
 * <v2.0 - 2023_1103_최원준>
 * 1- 주석 수정
 * 2- 이미지 컴포넌트 잡는 구문을 Start메서드에서 OnEnable로 변경
 * 인스턴스가 생성되어 이미지 컴포넌트를 잡기 시작하면 OnItemAdded와 호출 시점이 동시성을 가져서 스프라이트 이미지가 변경되지 않는다.
 * 
 * <v3.0 - 2023-1105_최원준>
 * 1- 개념아이템 변수인 item을 프로퍼티화 시켜서 set이 호출되었을 때 OnItemChanged()가 호출되도록 변경 
 * OnItemAdded는 private처리 및 내부 예외처리 구문 삭제
 *
 *<v4.0 - 2023_1108_최원준>
 *1- 아이템이 파괴될 때 정보를 저장하도록 구현하였으나, 모든아이템의 기록이 저장되지 않는 문제발생
 *=> 아이템쪽에서 파괴될떄마다 딕셔너리를 생성해서 CraftManager쪽에서 마지막에 한번 미리 생성해주도록 변경
 *
 *2- OnItemChanged 메서드 주석추가
 *
 *3- UpdateCountTxt 메서드 추가
 * 아이템 수량이 변경 될때 동적으로 텍스트를 수정해주도록 하였음.
 * item쪽에서 메서드를 가지고 있음으로 해서 편리한 접근성 확보.
 *
 *<v5.0 - 2023_1112_최원준>
 *1- OnItemAdded메서드 추가수정. (CreateManager쪽에서 중복코드 사용하고 있던 점 수정 및 통합, 주석 추가) 
 *
 *<v6.0 - 2023_1114_최원준>
 *1- OnItemAdded메서드를 OnItemChanged로 이름변경
 *2- ItemInfo 클래스 설명 주석 추가
 *3- private 메서드 public 메서드로 변경
 *4- 멤버 변수 item이 public되어있던 점을 private 처리. 반드시 프로퍼티를 통한 초기화를 위해
 *
 *<v7.0 - 2023_1116_최원준>
 *1- ItemInfo 클래스가 ItemImageCollection 멤버변수를 포함하여 외부이미지를 참조하도록 설정하였습니다. 
 *(CreateManager에 있던 참조 변수를 옮겨옴.)
 *
 *2- UpdateImage메서드를 수정하였습니다.
 *기존의 아이템 클래스가 ImageCollection 구조체 변수를 멤버로 포함하고 있던 점에서 ImageReferenceIndex 구조체 변수를 멤버로 포함하도록 바꾸었기 때문에
 *item의 ImageReferenceIndex 멤버변수로 부터 인덱스값을 받아와서 ImageCollection 변수에 접근하여 오브젝트에 이미지를 넣어주도록 수정.
 *
 *<v7.1 - 2023_1119_최원준>
 *1- OnDestroy()메서드 주석처리. 
 *Inventory클래스를 직렬화 가능하게 변경할 예정이므로
 *
 *2- RemoveItemObject 미구현 메서드 제거 - inventory클래스에서 구현
 *ItemInfo 클래스는 오브젝트의 정보만 최신화 시켜주는 역할을 하게 해야하기 때문이며, 
 *ItemInfo에서 item의 내부정보를 수정하는 메서드를 추가하기 시작하면, Inventory클래스에서의 기능을 중복 구현할 가능성이 커짐.
 *
 *<v8.0 - 2023_1216_최원준>
 *1- 아이템의 상태창 이미지 변수 statusImage 추가 및 UpdateImage메서드 내부 수정
 *
 *2- 아이템 파괴시 전달 로직 주석처리 되어있던 부분 제거
 *
 *3- slotList 변수명 slotListTr로 변경
 *
 *4- Transform imageCollectionsTr 임시변수 선언후 
 * GameObject.Find( "ImageCollections" ) 중복 호출 로직 수정
 *
 *<v8.1 - 2023_1217_최원준>
 *1- ItemImageCollection 변수들을 하나씩 참조하던 것을 배열로 만들어서 참조
 *
 *<v8.2 - 2023_1221_최원준>
 *1- GameObject.Find()메서드로 오브젝트를 검색하던 것을 빠른참조로 변경
 *
 *<v9.0 - 2023_1222_최원준>
 *1- 태그참조 철자오류 수정 (CANVAS_CHRACTER -> CANVAS_CHARACTER)
 *
 *2- ItemImageCollection[]의 배열을 참조만하고 생성을 안해서 뜨는 배열의 bounds오류 수정
 *
 *3- 아이템의 생성시점에 UpdateImage나 UpdatePosition을 호출하면 참조가 잡히지 않기 때문에 bounds오류가 뜨는데
 * OnItemChanged메서드를 아이템의 생성시점 호출이 아니라, 아이템의 등장 시점에 호출하도록 수정하였음.
 *
 *4 - SlotListTr이 뷰포트로 잡혀있던 점을 수정
 *
 *<v9.1 - 2023_1224_최원준>
 *1- Item프로퍼티의 주석일부 삭제
 *2- 컴포넌트 참조 구문 Start에서 OnEanble로 이동 및 정리
 *3- UpdataImage메서드 아이템 종류에 따른 중복로직 제거 후 간략화
 *
 *<v9.2 - 2023_1226_최원준>
 *1- 일부 디버그 출력메서드 정리
 *2- UpdatePosition에 slotListTr의 childCount 검사구문 추가
 *3- Item 프로퍼티 다시 주석해제 
 *
 *<v9.3 - 2023_1228_최원준>
 *1- 아이템 프리팹 계층 구조 변경으로 인해 (3D오브젝트 하위에 2D 오브젝트를 두는 구조)
 *각각 Transform, RectTransform itemTr와 itemRectTr 변수를 선언하여 자기트랜스폼 캐싱처리
 *
 *2- UpdatePosition 2D오브젝트의 부모를 변경하던 점을 최상위 3D오브젝트를 변경하도록 수정
 *
 *3- UpdatePosition 변수명을 UpdateInventoryPosition으로 변경
 *
 *<v9.4 - 2023_1228_최원준
 *1- 아이템 프리팹 계층구조 재변경으로 인해 (3D오브젝트, 2D오브젝트 전환방식)
 *코드를 2D기준으로 임시 변경 (itemTr->itemRectTr)
 *
 *<v10.0 - 2023_1229_최원준>
 *1- 파일 및 클래스명 변경 ItemInfo -> Item
 *이유는 중심기능이 스크립트에서 이루어져야 하며, 저장기능은 DtItem 인스턴스가 담당해야 하기 때문
 *
 *<v10.1 - 2023-1229_최원준>
 *1- UpdateSlotPosition에서 선택인자를 추가하여 슬롯리스트 정보를 주는 경우에는 해당 슬롯리스트의 인덱스로 포지션업데이트를 하며,
 *슬롯리스트 정보를 주지 않은 경우에는 아이템이 현재 담겨있는 슬롯을 기준으로 슬롯리스트를 참조해서 인덱스에 따른 포지션 업데이트를 하도록 변경
 *
 *2-
 *
 *
 *
 *
 *[추후 수정해야할 점] 
 * 1- UpdateInventoryPosition이 현재 자신 인벤토리 기준으로 수정하고 있으나,
 * 나중에 UpdatePosition을 할 때 아이템이 보관함 슬롯의 인덱스 뿐만 아니라 어느 보관함에 담겨있는지도 정보가 있어야 한다.
 *
 *
 *
 *
 *
 */


/// <summary>
/// 게임 상의 아이템 오브젝트는 이 클래스를 컴포넌트로 가져야합니다.<br/><br/>
/// 
/// ItemInfo 스크립트가 컴포넌트로 붙은 아이템 오브젝트의 자체적인 기능은 다음과 같습니다.<br/>
/// (ItemInfo의 개념 아이템 인스턴스인 item이 할당될 때 자동으로 이루어집니다.)<br/><br/>
/// 
/// 1.오브젝트의 이미지를 개념 아이템의 정보와 대조하여 채웁니다.<br/>
/// 2.잡화아이템의 경우 중첩횟수를 아이템정보와 비교하여 표시하여 줍니다. 비잡화 아이템의 경우 텍스트를 끕니다.<br/>
/// 3.인벤토리 슬롯 상의 포지션을 아이템 정보와 대조하여 해당 슬롯에 위치시킵니다.<br/><br/>
/// 
/// 주의) 아이템의 내부 정보가 바뀔 때 마다 최신 정보를 오브젝트에 반영해야 합니다.<br/>
/// 1,2,3의 경우 각 메서드를 따로 호출 할 수 있으며 모든 것을 한번에 호출하는  OnItemChanged메서드가 있습니다.<br/>
/// </summary>
public class ItemInfo : MonoBehaviour
{
    private Item item;             // 아이템의 실제 정보가 담긴 변수

    private Image itemImage;       // 아이템이 인벤토리에서 2D상에서 보여질 이미지 컴포넌트 참조  
    public Sprite innerSprite;     // 아이템이 인벤토리에서 보여질 이미지 스프라이트
    public Sprite statusSprite;    // 아이템이 상태창에서 보여질 이미지 스프라이트 (상태창 스크립트에서 참조를 하게 됩니다.)
    private Text countTxt;         // 잡화 아이템의 수량을 반영할 텍스트
        
    public ItemImageCollection[] iicArr;      // 인스펙터 뷰 상에서 등록할 아이템 이미지 집합 배열
    public enum eIIC { MiscBase,MiscAdd,MiscOther,Sword,Bow,Axe }    // 이미지 집합 배열의 인덱스 구분
    private readonly int iicNum = 6;                             // 이미지 집합 배열의 갯수


    private RectTransform itemRectTr;   // 자기자신 2D 트랜스폼 참조(초기 계층 - 상위 부모)
    private Transform itemTr;           // 자기자신 3D 트랜스폼 참조(초기 계층 - 하위 마지막 자식)


    private CanvasGroup itemCG;             // 아이템의 캔버스 그룹 컴포넌트 (아이템이 월드로 나갔을 때 2D이벤트를 막기위한 용도) 

    private bool isWorldPositioned;         // 아이템이 월드에 나와있는지 여부
    private InventoryInfo inventoryInfo;    // 아이템이 들어있는 인벤토리 오브젝트의 스크립트를 참조합니다.
    private Transform slotListTr;           // 아이템이 담겨있는 슬롯리스트 트랜스폼 정보

    
    /// <summary>
    /// 아이템이 월드에 나와있는지 (3D 오브젝트 인지) 여부를 반환합니다.
    /// </summary>
    public bool IsWorldPoisitioned { get { return isWorldPositioned; } }
    
    /// <summary>
    /// 현재 아이템이 담긴 인벤토리의 정보입니다.
    /// </summary>
    public InventoryInfo InventoryInfo { get { return inventoryInfo; } set; }

    /// <summary>
    /// 현재 아이템이 담겨있는 슬롯리스트의 Transform을 반환합니다.<br/>
    /// 프로퍼티 호출 시 아이템의 계층구조를 바탕으로 새롭게 정보를 산출합니다.<br/>
    /// 현재 슬롯의 정보를 직접 수정할 수 있습니다.<br/> 
    /// </summary>
    public Transform SlotListTr { get { return slotListTr; } }

    



    /// <summary>
    /// 아이템이 담겨있는 실제 정보를 직접 저장하거나 반환받습니다.<br/>
    /// 클론 한 Item 인스턴스를 저장하고, 저장 되어있는 인스턴스를 불러올 수 있습니다.<br/>
    /// </summary>
    public Item Item                
    {
        set
        {
            item=value;
        }
        get { return item; }
    }


    /// <summary>
    /// 이미지 컴포넌트를 잡는 우선순위를 높이기 위해 OnEnable 사용
    /// </summary>
    private void OnEnable()
    {
        itemRectTr = transform.GetComponent<RectTransform>();   // 자기자신 2d 트랜스폼 참조(초기 계층 - 상위 부모)
        itemTr = itemRectTr.GetChild(itemRectTr.childCount-1);  // 자기자신 3d 트랜스폼 참조(초기 계층 - 하위 마지막 자식)

        itemImage = GetComponent<Image>();
        countTxt = GetComponentInChildren<Text>();

        Transform canvasTr = GameObject.FindWithTag("CANVAS_CHARACTER").transform;
        //slotListTr = canvasTr.GetChild(0).GetChild(0).GetChild(0).GetChild(0);
        
        // 인스펙터뷰 상에서 달아놓은 스프라이트 이미지 집합을 참조합니다.
        Transform imageCollectionsTr = GameObject.FindAnyObjectByType<CreateManager>().transform.GetChild(0);

        // 배열을 해당 갯수만큼 생성해줍니다.
        iicArr = new ItemImageCollection[iicNum];

        // 각 iicArr은 imageCollectionsTr의 하위 자식오브젝트로서 ItemImageCollection 스크립트를 컴포넌트로 가지고 있습니다
        for( int i = 0; i<iicNum; i++)
            iicArr[i] = imageCollectionsTr.GetChild(i).GetComponent<ItemImageCollection>();
        
        isWorldPositioned = false;
        itemCG = GetComponent<CanvasGroup>();
    }
    

    /// <summary>
    /// 아이템의 연관된 모든 정보를 최신화합니다.(아이템의 내부정보를 오브젝트에 반영합니다.)<br/>
    /// 오브젝트에 item의 참조가 이루어졌다면 item이 가지고 있는 이미지를 반영하고 잡화아이템의 경우 중첩 횟수까지 최신화 합니다.<br/>
    /// **** 외부 스크립트에서 이 스크립트의 메서드를 통하지 않고 프로퍼티를 받아 아이템 내부 정보를 직접 수정했을 때 최신 정보 반영을 위하여 따로 호출해야 합니다. ****<br/>
    /// </summary>
    /// <param name="SlotListTr">아이템이 담긴 슬롯 리스트의 트랜스폼</param>
    public void OnItemChanged(Transform SlotListTr=null)
    {
        UpdateImage();
        UpdateCountTxt();
        UpdatePositionInSlotList(slotListTr);
    }

    /// <summary>
    /// 아이템의 이미지 정보를 받아와서 오브젝트에 반영합니다.<br/>
    /// Item 클래스는 정의될 때 외부에서 참조할 이미지 인덱스를 저장하고 있습니다.<br/>
    /// 해당 인덱스를 참고하여 인스펙터뷰에 등록된 이미지를 참조합니다.
    /// </summary>
    public void UpdateImage()
    {
        if(iicArr.Length == 0 )     // 아이템 생성 시점에 iicArr을 참조하는 것을 방지하여 줍니다.
            return;

        int imgIdx = -1;            // 참조할 이미지 인덱스 선언
                   
        switch( Item.Type )         // 아이템의 메인타입을 구분합니다.
        {

            case ItemType.Weapon:
                ItemWeapon weapItem = (ItemWeapon)Item;
                WeaponType weaponType = weapItem.WeaponType;  // 아이템의 서브타입을 구분합니다.

                switch (weaponType)
                {
                    case WeaponType.Sword :             // 서브타입이 검이라면,
                        imgIdx = (int)eIIC.Sword;
                        break;
                    case WeaponType.Bow :               // 서브타입이 활이라면,
                        imgIdx = (int)eIIC.Bow;
                        break;
                }
                break;
                
            case ItemType.Misc:
                ItemMisc miscItem = (ItemMisc)Item; 
                MiscType miscType = miscItem.MiscType;

                switch (miscType)
                {
                    case MiscType.Basic :           // 서브타입이 기본 재료라면,
                        imgIdx = (int)eIIC.MiscBase;
                        break;
                    case MiscType.Additive :        // 서브타입이 추가 재료라면,
                        imgIdx = (int)eIIC.MiscAdd;
                        break;
                    default :                       // 서브타입이 기타 재료라면,
                        imgIdx = (int)eIIC.MiscOther;
                        break;
                }
                break;
        }

        // 아이템 오브젝트 이미지를 인스펙터뷰에 직렬화되어 있는 ItemImageCollection 클래스의 내부 구조체 배열 ImageColection[]에
        // 개념아이템이 고유 정보로 가지고 있는 ImageReferenceIndex 구조체의 인덱스를 가져와서 접근합니다.                
             
        innerSprite = iicArr[imgIdx].icArrImg[Item.ImageRefIndex.innerImgIdx].innerSprite;
        statusSprite = iicArr[imgIdx].icArrImg[Item.ImageRefIndex.statusImgIdx].statusSprite;

        // 참조한 스프라이트 이미지를 기반으로 아이템이 보여질 2D이미지를 장착합니다.
        itemImage.sprite = innerSprite;
    }


    /// <summary>
    /// 잡화 아이템의 중첩횟수를 동적으로 수정합니다. 잡화 아이템의 수량이 변경될 때 마다 호출해 주십시오.
    /// </summary>
    public void UpdateCountTxt()
    {
        if( Item.Type==ItemType.Misc )                // 잡화 아이템의 중첩 갯수를 표시합니다.
        {
            countTxt.enabled=true;
            countTxt.text = ((ItemMisc)Item).OverlapCount.ToString();
        }
        else
            countTxt.enabled = false;                // 잡화아이템이 아니라면 중첩 텍스트를 비활성화합니다.
    }






    
    /// <summary>
    /// 현재 아이템이 슬롯 리스트에 속해있다면 위치를 슬롯 인덱스에 맞게 최신화시켜줍니다.<br/>
    /// </summary>
    public void UpdatePositionInSlotList(Transform slotListTr = null)
    {
        if( isWorldPositioned )   // 아이템이 월드상에 나와있다면 실행하지 않습니다.
        {
            Debug.Log( "아이템이 월드에 나와있는 상태이므로 위치정보를 업데이트 할 수 없습니다." );
            return;
        }

        // 인자로 슬롯리스트 트랜스폼을 전달하지 않았다면, 현재 아이템이 들어있는 슬롯의 부모를 확인하여 참조합니다.
        if(slotListTr == null )
            slotListTr = itemRectTr.parent.parent;  

        // 슬롯 리스트에 슬롯이 생성되어있지 않다면 하위로직을 실행하지 않습니다.
        if( slotListTr.childCount==0 )
        {
            Debug.Log( "현재 슬롯이 생성되지 않은 상태입니다." );
            return;
        }

        // 오브젝트의 현 부모를 아이템 정보에 저장되어있는 슬롯 위치로 변경 한 후 로컬위치를 슬롯에 맞춥니다.
        itemRectTr.SetParent( slotListTr.GetChild(item.SlotIndex) );  
        itemRectTr.localPosition = Vector3.zero;                      
    }


    /// <summary>
    /// 남아있는 슬롯 중에서 가장 작은 인덱스를 반환합니다. 슬롯이 꽉 찬경우 -1을 반환합니다.
    /// </summary>
    public int FindNearstRemainSlotIdx( Transform slotListTr = null ) 
    {
        // 슬롯리스트 정보를 전달하지 않았다면, 현재 아이템이 담긴 슬롯을 기반으로 슬롯리스트를 참조합니다.
        if(slotListTr==null)
            slotListTr = itemRectTr.parent.parent;

        int findIdx = -1;

        for( int i = 0; i<slotListTr.childCount; i++ )
        {
            if( slotListTr.GetChild(i).childCount!=0 )  // 해당 슬롯리스트에 자식이 있다면 다음 슬롯리스트로 넘어갑니다.
                continue;

            findIdx = i;
            break;
        }

        // findIdx가 수정되지 않았다면 -1을 반환합니다. 수정되었다면 0이상의 인덱스값을 반환합니다.
        return findIdx;     
    }



    /// <summary>
    /// 아이템의 2D 기능을 중단하거나 다시 활성화시키는 메서드입니다.<br/>
    /// 인자로 현재 월드에 놓여진 상태 여부를 전달하여야 합니다.
    /// </summary>
    /// <param name="isWorldPositioned"></param>
    private void TurnOnOffOperationAs2D(bool isWorldPositioned)
    {        
        // 월드 상에 아이템이 있다면, UI 이벤트를 더 이상 받지 않으며, 2D이미지를 투명처리합니다.
        itemCG.blocksRaycasts = !isWorldPositioned;
        itemCG.alpha = isWorldPositioned ? 0f:1f;
    }



    /// <summary>
    /// 아이템을 2D UI에서 3D 월드로 위치정보를 주어서 계층구조를 변경하여 이동을 해주는 메서드입니다.<br/>
    /// 상위 부모를 설정할 수 있습니다.
    /// </summary>
    /// <returns>이동에 성공한 경우는 true를, 위치정보가 잘못되어 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate2DToWorld(Transform worldTr, bool setParentMode=false)
    {   
        // World상태 변수 활성화
        isWorldPositioned = true;
                
        // 3D오브젝트 포지션 설정
        itemTr.position=worldTr.position;
        itemTr.rotation=worldTr.rotation;

        // 계층구조 전환                  
        itemTr.SetParent(null);             // 3D오브젝트의 부모를 인벤토리에서 최상위 씬으로 변경
        itemTr.gameObject.SetActive(true);  // 3D오브젝트를 활성화
        itemRectTr.SetParent(itemTr);       // 2D오브젝트의 부모를 3D오브젝트로 변경

        // Mode인자 전달 시 부모 재설정
        if( setParentMode )                 
            itemTr.SetParent(worldTr);
                
        // 아이템의 2D기능을 중단합니다.
        TurnOnOffOperationAs2D( isWorldPositioned );
        return true;
    }

    /// <summary>
    /// 아이템을 2D UI에서 3D 월드로 위치정보를 주어서 계층구조를 변경하여 이동을 해주는 메서드입니다.<br/>
    /// 상위부모를 설정할 수 없습니다.
    /// </summary>
    /// <returns>이동에 성공한 경우는 true를, 위치 정보가 잘못되어 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate2DToWorld(Vector3 worldPos, Quaternion worldRot )
    {
        // World상태 변수 활성화
        isWorldPositioned = true;

        // 3D오브젝트 포지션 설정
        itemTr.position = worldPos;
        itemTr.rotation = worldRot;
        
        // 계층구조 전환
        itemTr.SetParent(null);             // 3D오브젝트의 부모를 인벤토리에서 최상위 씬으로 변경
        itemTr.gameObject.SetActive(true);  // 3D오브젝트를 활성화
        itemRectTr.SetParent(itemTr);       // 2D오브젝트의 부모를 3D오브젝트로 변경
                
        // 아이템의 2D기능을 중단합니다.
        TurnOnOffOperationAs2D( isWorldPositioned );

        return true;
    }
    
    /// <summary>
    /// 아이템을 3D 월드에서 슬롯으로 계층구조를 변경하여 이동을 해주는 메서드입니다. 
    /// </summary>
    /// <returns>이동에 성공한 경우는 true를 슬롯이 꽉차 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate3DToSlot(Transform slotTr)
    {
        // 현재 아이템이 월드에 나가있는 상태라면,
        if( isWorldPositioned )  
        {
            isWorldPositioned = false;              // 월드위치 상태여부를 비활성화 합니다.
            itemRectTr.SetParent( slotTr );         // 2D 오브젝트의 부모를 슬롯으로 설정
            itemTr.SetParent( itemRectTr );         // 3D 오브젝트의 부모를 2D 오브젝트로 설정
            itemTr.gameObject.SetActive( false );   // 3D 오브젝트 비활성화
        }
                
        // 아이템의 2D기능을 활성화합니다.
        TurnOnOffOperationAs2D( isWorldPositioned );

        // 아이템의 인덱스를 전달받은 슬롯을 기반으로 설정해줍니다.
        item.SlotIndex = slotTr.GetSiblingIndex();  

        // 아이템의 위치정보를 업데이트 해줍니다.
        UpdatePositionInSlotList();   

        return true;
    }

    /// <summary>
    /// 아이템을 3D 월드에서 슬롯리스트로 계층구조를 변경하여 이동을 해주는 메서드입니다.<br/>
    /// 인자로 슬롯리스트의 트랜스폼과 슬롯인덱스를 전달해야합니다.<br/>
    /// 인자를 전달하지 않은 경우 슬롯의 가장 가까운 곳에 아이템을 위치시켜줍니다.
    /// </summary>
    /// <returns>이동에 성공한 경우는 true를 슬롯이 꽉차 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate3DToSlotList(Transform slotListTr, int slotIndex=-1)
    {
        // 인자로 전달받은 인덱스가 -1이하라면, 가장 가까운 슬롯을 찾습니다.
        if(slotIndex<=-1)                                       
            slotIndex = FindNearstRemainSlotIdx(slotListTr);

        // 찾거나 전달받은 슬롯 인덱스를 기반으로 아이템을 넣어줄 슬롯을 설정합니다.
        Transform targetSlot = slotListTr.GetChild(slotIndex);

        // 슬롯정보를 전달하여 계층정보를 변경하는 메서드를 호출합니다.
        Locate3DToSlot(targetSlot); 
    }

    /// <summary>
    /// 아이템을 3D 월드에서 인벤토리의 슬롯으로 계층구조를 변경하여 이동을 해주는 메서드입니다.<br/>
    /// 전달된 인벤토리를 기반으로 가장 가까운 슬롯을 찾아서 아이템을 넣어줍니다. <br/>
    /// </summary>
    /// <param name="inventoryInfo">인벤토리 스크립트</param>
    /// <returns>이동에 성공한 경우는 true를 슬롯이 꽉차 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate3DToInventory(InventoryInfo inventoryInfo)
    {
        return Locate3DToInventory( inventoryInfo.inventory );
    }

    
    /// <summary>
    /// 아이템을 3D 월드에서 인벤토리의 슬롯으로 계층구조를 변경하여 이동을 해주는 메서드입니다.<br/>
    /// 전달된 인벤토리를 기반으로 가장 가까운 슬롯을 찾아서 아이템을 넣어줍니다. <br/>
    /// </summary>
    /// <param name="inventory">인벤토리 정보</param>
    /// <returns>이동에 성공한 경우는 true를 슬롯이 꽉차 이동할 수 없다면 false를 반환합니다.</returns>
    public bool Locate3DToInventory( Inventory inventory )
    {
        return true;
    }

}